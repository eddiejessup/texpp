#labels Featured
= Using the library =

The basic example of using !TeXpp is available in [http://code.google.com/p/texpp/source/browse/trunk/tests/texpp.cc texpp.cc]. The same example but based on python bindings can be found in [http://code.google.com/p/texpp/source/browse/trunk/hrefkeywords/texpp.py texpp.py].

= Testing the library =

The `texpp` example can also be used for testing the library interactively.

When run without arguments `texpp` behaves like `TeX` in interactive mode and accepts `TeX` commands from console. After finishing an interactive session (by either \end or end-of-file) `texpp` prints a parsed document tree.
When run with one argument (the name of a file) `texpp` parses the file printing only log messages. In this mode document tree is not printed.

Python version of `texpp`, `texpp.py`, can also be used for testing. It has slightly different syntax which can be queried by running it with `--help` option.

= Unit tests =

!TeXpp has an extensive test suite for testing its compatibility with `TeX`. It consists of many TeX files specifically designed to test various `TeX` commands by running them and outputting results into a log file. The test script ([http://code.google.com/p/texpp/source/browse/trunk/tests/tex/test_tex.cc test_tex.cc]) runs both !TeXpp and `TeX` on these files and compares generated log files.

Another group of tests is designed to check whether a document tree generated by !TeXpp preserves the complete source of the document. The test script ([http://code.google.com/p/texpp/source/browse/trunk/tests/tex/test_source.cc test_source.cc]) simply parses the `TeX` documents using !TeXpp, generates the source from a document tree and compares it with original source.

The final group of tests ([http://code.google.com/p/texpp/source/browse/trunk/tests/test_lexer.cc test_lexer.cc], [http://code.google.com/p/texpp/source/browse/trunk/tests/test_parser.cc test_parser.cc]) are actually unit tests testing various methods of Lexer and Parser classes.